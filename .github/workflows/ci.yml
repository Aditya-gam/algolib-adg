name: CI

on:
  push:
    branches: [ "main", "feat/**" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.8.2"
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --all-extras

      - name: Install project
        run: poetry install --no-interaction --all-extras

      - name: Initialize database
        run: chmod +x scripts/db_init.sh && ./scripts/db_init.sh
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/testdb

      - name: Run Ruff (format + lint)
        run: |
          poetry run ruff format --check .
          poetry run ruff check .

      - name: Run mypy (strict)
        run: |
          poetry run mypy --strict algolib tests

      - name: Run tests with coverage
        run: |
          poetry run pytest
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/testdb

      - name: Run FastAPI smoke test
        run: |
          poetry run uvicorn algolib.api.main:app --host 0.0.0.0 --port 8000 &
          python - <<PY
          import requests, time, os
          time.sleep(5)
          r = requests.get("http://localhost:8000/health/db")
          assert r.json() == {"db": "ok"}
          PY
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/testdb

      - name: Interface compliance
        run: python scripts/check_interface.py ${{ github.event.pull_request.base.sha || github.sha }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true

      - name: Build documentation (HTML)
        run: |
          poetry run sphinx-build -b html docs/source docs/_build/html
