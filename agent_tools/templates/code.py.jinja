"""
This is the Jinja2 template for generating algorithm implementation code.
It receives an `AlgorithmSpec` object as `spec`.
"""

# imports

from dataclasses import dataclass

{% for dep in spec.dependencies %}
from algolib.interfaces import {{ dep }}
{% endfor %}

# Placeholder for {{ spec.name }}

class {{ spec.name.replace(" ", "") }}:
    """
    {{ spec.description }}
    """
    def __init__(self):
        pass

    def run(self, {% for p in spec.parameters %}{{ p.name }}: {{ p.type }}{% if not loop.last %}, {% endif %}{% endfor %}) -> {{ spec.returns.type }}:
        """
        {{ spec.description }}
        """
        pass
